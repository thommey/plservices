/* prefix tree with data associated with keys.
 * - fixed array keys of [_A-Z]
 * - full children for each valid inner node
 * - no delete operation */
/* lookup and insertion is case insensitive */

#include <string.h>
#include <stdlib.h>
#include <ctype.h>

#include "tree.h"
#include "parse.h"
#include "convert.h"
#include "log.h"

#define char2idx(c) ((c == '_') ? 0 : (toupper(c)-'A'+1))
#define into(node, c) ((node)->next[char2idx(c)])

static size_t treememory;

static void *tree_alloc(size_t s) {
	treememory += s;
	return malloc(s);
}

void memreport_tree(void) {
	debug(LOG_DEBUG, "Tree memory used: %zd\n", treememory);
}

void *tree_create() {
	tree_t *t;
	t = tree_alloc(sizeof(*t));
	memset(t, 0, sizeof(*t));
	return t;
};

void tree_insert(tree_t *current, const char *str, void *data) {
	int i;

	for (i = 0; i < strlen(str); i++) {
		if (!into(current, str[i])) {
			into(current, str[i]) = malloc(sizeof(struct treenode));
			memset(into(current, str[i]), 0, sizeof(struct treenode));
		}
		current = into(current, str[i]);
	}

	if (current->data)
		error("Could not insert into tree, already exists");

	current->data = data;
}

void *tree_get(tree_t *current, const char *str) {
	int i;

	for (i = 0; i < strlen(str); i++) {
		current = into(current, str[i]);
		if (!current)
			return NULL;
	}

	return current->data;
}
